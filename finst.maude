fmod TERM-SUBST is
 pr META-LEVEL .

 sort TermSub .

 op mtTS : -> TermSub [ctor] .
 op _->_ : Term Term -> TermSub [ctor prec 30] .
 op _._ : TermSub TermSub -> TermSub [ctor comm assoc id: mtTS] .

 vars T T1 T2 : Term .
 var  TL : TermList .
 var  AtS : AttrSet .
 var  C : Condition .
 var  TS : TermSub .
 var  Ty : Type .
 var  Q : Qid .

 op _[_] : Term TermSub -> Term .
 eq T [ T -> T1 . TS] = T1 .
 eq T [TS] = sub(T, TS) [owise] .

 op sub : Term TermSub -> Term .
 eq sub(Q[TL], TS) = Q[sub*(TL, TS)] .
 eq sub(T, TS) = T [owise] .

 op sub* : TermList TermSub -> TermList .
 eq sub*(empty, TS) = empty .
 eq sub*((T, TL), TS) = T[TS], sub*(TL, TS) .

 op sub : Rule TermSub -> Rule .
 eq sub(rl T1 => T2 [AtS] ., TS) = rl T1[TS] => T2[TS] [AtS] . .
 eq sub(crl T1 => T2 if C [AtS] ., TS) = crl T1[TS] => T2[TS] if subCond(C, TS) [AtS] . .

 op subCond : Condition TermSub -> Condition .
 eq subCond(nil, TS) = nil .
 eq subCond(T1 = T2 /\ C, TS) = T1[TS] = T2[TS] /\ subCond(C, TS) .
 eq subCond(T1 := T2 /\ C, TS) = T1[TS] := T2[TS] /\ subCond(C, TS) .
 eq subCond(T1 => T2 /\ C, TS) = T1[TS] => T2[TS] /\ subCond(C, TS) .
 eq subCond(T : Ty /\ C, TS) = T[TS] : Ty /\ subCond(C, TS) .
endfm

fmod FINST is
 pr TERM-SUBST .
 pr CONVERSION .

 vars TL TL' TL'' : TermList .
 var  SSDS : SubsortDeclSet .
 vars T T' T'' T1 T2 : Term .
 vars C C' C'' : Constant .
 var  EqS : EquationSet .
 vars RS RS' : RuleSet .
 vars TS TS' : TermSub .
 vars S S1 S2 : String .
 var  COND : Condition .
 vars R R' R'' : Rule .
 var  ODS : OpDeclSet .
 var  IL : ImportList .
 var  MAS : MembAxSet .
 vars V V' : Variable .
 var  TyL : TypeList .
 var  AtS : AttrSet .
 var  SS : SortSet .
 var  M : Module .
 var  H : Header .
 vars Q Q' : Qid .
 vars N N' : Nat .
 var  Ty : Type .

 op finst : SModule -> SModule .
 ceq finst(mod H is IL sorts SS . SSDS ODS MAS EqS RS endm) =
              mod H is IL sorts SS . SSDS ODS MAS EqS RS' endm
  if RS' := finst(RS, ODS) .

 op finst : RuleSet OpDeclSet -> RuleSet .
 eq finst(none, ODS) = none .
 ceq finst(R RS, ODS) = R' finst(RS, ODS)
  if R' := finstRule(R, ODS) .

 op finstRule : Rule OpDeclSet -> Rule .
 ceq finstRule(R, ODS) = simplify(sub(R, TS . TS'))
  if TS := forwards(R, ODS) /\
     TS' := backwards(sub(R, TS), ODS) .
 eq finstRule(R, ODS) = R [owise] .

 op forwards : Rule OpDeclSet -> TermSub .
 ceq forwards(R, ODS) = TS
  if T := getLHS(R) /\
     TS := forwards(T, ODS) .

 op backwards : Rule OpDeclSet -> TermSub .
 ceq backwards(R, ODS) = TS
  if T := getRHS(R) /\
     TS := backwards(T, ODS) .

 op backwards : Term OpDeclSet -> TermSub .
 eq backwards('PD[T], ODS) = $backwards(T, ODS) .
 eq backwards(T, ODS) = $backwards(T, ODS) [owise] .

 op $backwards : Term OpDeclSet -> TermSub .
 eq $backwards('__[TL], ODS) = $backwards*(TL, ODS) .
 eq $backwards('`{_|_`}[T, T'], ODS) =
             backwardsContents(T', ODS) .

 op $backwards* : TermList OpDeclSet -> TermSub .
 eq $backwards*(empty, ODS) = mtTS .
 eq $backwards*((T, TL), ODS) = $backwards(T, ODS) .
                                $backwards*(TL, ODS) .

 op backwardsContents : Term OpDeclSet -> TermSub .
 eq backwardsContents('__[TL], ODS) = backwardsContents*(TL, ODS) .
 eq backwardsContents('`[_-_`][T, T'], ODS) = getEpitopes(ODS, T') .
 eq backwardsContents(T, ODS) = mtTS [owise] .

 op getEpitopes : OpDeclSet Term -> TermSub .
 eq getEpitopes(ODS, '__[TL]) = getEpitopes*(ODS, TL) .
 eq getEpitopes(ODS, V) = mtTS .
 eq getEpitopes(ODS, C) = mtTS .
 eq getEpitopes(ODS, T) = sameEpitope(ODS, T) [owise] .

 op getEpitopes* : OpDeclSet TermList -> TermSub .
 eq getEpitopes*(ODS, empty) = mtTS .
 eq getEpitopes*(ODS, (T, TL)) = getEpitopes(ODS, T) .
                                 getEpitopes*(ODS, TL) .

 op sameEpitope : OpDeclSet Term -> TermSub .
 ceq sameEpitope(op Q : TyL -> Ty [metadata(S) AtS] . ODS, Q'[TL]) =
                                             (Q'[TL]) -> (Q'[C])
  if find(S, "epitopes", 0) =/= notFound /\
     S1 := getString(TL) /\
     find(S, S1, 0) =/= notFound /\
     C := qid(string(Q) + "." + string(Ty)) .
 eq sameEpitope(ODS, T) = mtTS [owise] .

 op getString : Term ~> String .
 eq getString('__[TL]) = getString*(TL) .
 eq getString(C) = string(getName(C)) .
 ceq getString(T) = string(N, 10)
  if N := downTerm(T, 0) [owise] .

 op getString* : TermList ~> String .
 eq getString*((T, TL)) = getString(T) + getString*(TL) .
 eq getString*(empty) = "" .

 op backwardsContents* : TermList OpDeclSet -> TermSub .
 eq backwardsContents*(empty, ODS) = mtTS .
 eq backwardsContents*((T, TL),  ODS) = backwardsContents(T, ODS) .
                                        backwardsContents*(TL, ODS) .

 op forwards : Term OpDeclSet -> TermSub .
 eq forwards('PD[T], ODS) = $forwards(T, ODS) .
 eq forwards(T, ODS) = $forwards(T,  ODS) [owise] .

 op $forwards : Term OpDeclSet -> TermSub .
 eq $forwards('__[TL], ODS) = $forwards*(TL, ODS) .
 eq $forwards('`{_|_`}[T, T'], ODS) =
             substForwards(T', ODS) .

 op $forwards* : TermList OpDeclSet -> TermSub .
 eq $forwards*(empty, ODS) = mtTS .
 eq $forwards*((T, TL), ODS) = $forwards(T, ODS) .
                               $forwards*(TL, ODS) .

 op substForwards : Term OpDeclSet -> TermSub .
 eq substForwards('__[TL], ODS) = substForwards*(TL, ODS) .
 ceq substForwards('`[_-_`][T, T'], ODS) = T -> C
  if C := getFamily(ODS, T) .
 eq substForwards(T, ODS) = mtTS [owise] .

 op substForwards* : TermList OpDeclSet -> TermSub .
 eq substForwards*(empty, ODS) = mtTS .
 eq substForwards*((T, TL), ODS) = substForwards(T, ODS) .
                                   substForwards*(TL, ODS) .

 op getFamily : OpDeclSet Constant ~> Constant .
 ceq getFamily(op Q : TyL -> Ty [metadata(S) AtS] . ODS, C) = C'
  if N := find(S, "type Family", 0) /\
     S1 := string(getName(C)) /\
     find(S, S1, N) =/= notFound /\
     C' := qid(string(Q) + "." + string(Ty)) .

 op getLHS : Rule -> Term .
 eq getLHS(rl T => T' [AtS] .) = T .
 eq getLHS(crl T => T' if COND [AtS] .) = T .

 op getRHS : Rule -> Term .
 eq getRHS(rl T => T' [AtS] .) = T' .
 eq getRHS(crl T => T' if COND [AtS] .) = T' .

 op simplify : Rule -> Rule .
 eq simplify(rl T => T' [AtS] .) = rl simplify(T) => simplify(T') [AtS] . .
 eq simplify(crl T => T' if COND [AtS] .) = crl simplify(T) => simplify(T') if COND [AtS] . .

 op simplify : Term -> Term .
 eq simplify(C) = C .
 eq simplify(V) = V .
 eq simplify(Q[TL]) = Q[simplify*(remove(TL))] .

 op simplify* : TermList -> TermList .
 eq simplify*(empty) = empty .
 eq simplify*((T, TL)) = simplify(T), simplify*(TL) .

 op remove : TermList -> TermList .
 eq remove((TL, T, TL', T, TL'')) = remove((TL, T, TL', TL'')) .
 eq remove(TL) = TL [owise] .
endfm

