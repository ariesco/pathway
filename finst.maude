fmod FINST is
 pr META-LEVEL .

 var  SSDS : SubsortDeclSet .
 vars C C' C'' : Constant .
 var  EqS : EquationSet .
 vars  RS RS' : RuleSet .
 vars S S1 S2 : String .
 vars R R' R'' : Rule .
 var  ODS : OpDeclSet .
 var  IL : ImportList .
 var  MAS : MembAxSet .
 var  TyL : TypeList .
 var  AtS : AttrSet .
 var  SS : SortSet .
 var  M : Module .
 var  H : Header .
 var  Ty : Type .
 var  Q : Qid .

 op finst : Module -> Module .
 ceq finst(mod H is IL sorts SS . SSDS ODS MAS EqS RS endm) =
              mod H is IL sorts SS . SSDS ODS MAS EqS RS' endm
  if RS' := finst(RS, ODS) .

 op finst : RuleSet OpDeclSet -> RuleSet .
 ceq finst(R R' RS, ODS) = finst(R'' RS, ODS)
  if R'' := join(R, R', ODS) .
 eq finst(RS, ODS) = RS [owise] .

 op join : Rule Rule OpDeclSet ~> Rule .

 op getFamily : Module Constant Constant ~> Constant .
 eq getFamily(M, C, C') = getFamily(getOps(M), C, C') .

 op getFamily : OpDeclSet Constant Constant ~> Constant .
 ceq getFamily(op Q : TyL -> Ty [metadata(S) AtS] . ODS , C, C') = C''
  if S1 := string(getName(C)) /\
     find(S, S1, 0) =/= notFound /\
     S2 := string(getName(C')) /\
     find(S, S2, 0) =/= notFound /\
     C'' := qid(string(Q) + "." + string(Ty)) .
 ceq getFamily(op Q : TyL -> Ty [metadata(S) AtS] . ODS , C, C') = C
  if Q == getName(C) /\
     S2 := string(getName(C')) /\
     find(S, S2, 0) =/= notFound .
 ceq getFamily(op Q : TyL -> Ty [metadata(S) AtS] . ODS , C, C') = C'
  if S1 := string(getName(C)) /\
     find(S, S1, 0) =/= notFound /\
     Q == getName(C') .
endfm